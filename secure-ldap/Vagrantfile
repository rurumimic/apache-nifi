# -*- mode: ruby -*-
# vi: set ft=ruby :

$num_instances = 1
$instance_name_prefix = "node"
$forwarded_ports = {
  8080 => 8080,
  9443 => 9443,
  6342 => 6342,
}

Vagrant.configure("2") do |config|

  config.vm.define vm_name = "ldap" do |config|
    config.vm.hostname = vm_name
    config.vm.box = "generic/centos7"

    $forwarded_ports.each do |guest, host|
      config.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
    end

    ip = "192.168.20.10"
    config.vm.network :private_network, ip: ip

    config.vm.synced_folder "./share", "/share"
    config.vm.synced_folder "./ldap", "/ldap"

    # Update ca certs
    config.vm.synced_folder "../certs", "/certs"
    config.vm.provision "shell" do |s|
      s.path = "https://raw.githubusercontent.com/rurumimic/no-check-certificate/main/centos/7/update-certs.sh"
      s.args = ["/certs"]
    end

    config.vm.provision "shell", inline: <<-SHELL
      firewall-cmd --permanent --zone=public --add-port=389/tcp
      firewall-cmd --reload
    SHELL

    config.vm.provision :ansible do |ansible|
      ansible.playbook = "ansible/playbook.yaml"
      ansible.vault_password_file = "ansible/vault.secret"
      ansible.limit = "ldap"
    end

  end

  (1..$num_instances).each do |i|
    config.vm.define vm_name = "%s%d" % [$instance_name_prefix, i] do |config|
      config.vm.hostname = vm_name
      config.vm.box = "ubuntu/focal64"

      $forwarded_ports.each do |guest, host|
        config.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
      end

      ip = "192.168.20.#{i+10}"
      config.vm.network :private_network, ip: ip

      config.vm.synced_folder "../files", "/files"
      config.vm.synced_folder "./share", "/share"
      config.vm.provider "virtualbox" do |vb|
        vb.cpus = "2"
        vb.memory = "2048"
      end

      # Update ca certs
      config.vm.synced_folder "../certs", "/certs"
      config.vm.provision "shell" do |s|
        s.path = "https://raw.githubusercontent.com/rurumimic/no-check-certificate/main/ubuntu/focal64/update-certs.sh"
        s.args = ["/certs"]
      end

      # Add hosts
      (1..$num_instances).each do |number|
        config.vm.provision "shell" do |s|
          s.inline = "echo $1 | tee -a /etc/hosts"
          s.args   = ["192.168.20.#{number+10} node#{number}.nifi node#{number}"]
        end
      end
      config.vm.provision "shell" do |s|
        s.inline = "hostnamectl set-hostname $1"
        s.args   = ["node#{i}.nifi"]
      end
      config.vm.provision "shell" do |s|
        s.inline = "echo $1 | tee -a /etc/hosts"
        s.args   = ["192.168.20.10 ldap.example.com ldap"]
      end

      # Install JDK 8
      config.vm.provision "shell", inline: <<-SHELL
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y openjdk-8-jdk-headless
        echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> /etc/profile
      SHELL
        
      # Create NiFi user and group
      config.vm.provision "shell", inline: <<-SHELL
        echo "Create NiFi user and group"
        groupadd nifi
        useradd -m -g nifi -s /bin/bash nifi
      SHELL

      # Install Nifi and Toolkit
      config.vm.provision "shell", inline: <<-SHELL
        echo "Install Nifi and Toolkit"
        # NiFi
        mkdir -p /opt/nifi
        cp -r /files/nifi-1.13.0 /opt/nifi/nifi-1.13.0
        ln -s /opt/nifi/nifi-1.13.0 /opt/nifi/current
        chown -R nifi:nifi /opt/nifi
        # Toolkit
        mkdir -p /opt/nifi-toolkit
        cp -r /files/nifi-toolkit-1.13.0 /opt/nifi-toolkit/nifi-toolkit-1.13.0
        ln -s /opt/nifi-toolkit/nifi-toolkit-1.13.0 /opt/nifi-toolkit/current
        chown -R nifi:nifi /opt/nifi-toolkit
        chmod -R +rx /opt/nifi-toolkit
        # Env
        echo 'export NIFI_HOME=/opt/nifi/current' >> /etc/profile
        echo 'export NIFI_TOOLKIT_HOME=/opt/nifi-toolkit/current' >> /etc/profile
        echo 'export PATH=$PATH:$NIFI_HOME/bin' >> /etc/profile
        echo 'export PATH=$PATH:$NIFI_TOOLKIT_HOME/bin' >> /etc/profile
      SHELL

      # Add NiFi systemd file
      config.vm.provision "shell", inline: <<-SHELL
        echo "Add /etc/systemd/system/nifi.service"
        cp /vagrant/nifi/nifi.service /etc/systemd/system/nifi.service
      SHELL

      # Update Configurations
      config.vm.provision "shell" do |s|
        s.inline = "cp /vagrant/nifi/nodes/$1/nifi.properties /opt/nifi/current/conf/nifi.properties"
        s.args   = ["node#{i}.nifi"]
      end

      # XMLs
      config.vm.provision "shell", inline: <<-SHELL
        cp /vagrant/nifi/state-management.xml /opt/nifi/current/conf/state-management.xml
        cp /vagrant/nifi/authorizers.xml /opt/nifi/current/conf/authorizers.xml
        cp /vagrant/nifi/login-identity-providers.xml /opt/nifi/current/conf/login-identity-providers.xml
      SHELL
      
      # Keys
      config.vm.provision "shell" do |s|
        s.inline = "cp /vagrant/nifi/nodes/$1/{keystore.jks,truststore.jks} /opt/nifi/current/conf/"
        s.args   = ["node#{i}.nifi"]
      end

      # Permissions
      config.vm.provision "shell", inline: <<-SHELL
        chown -R nifi:nifi /opt/nifi/current/conf
      SHELL

      # Debug
      # config.vm.provision "shell", inline: <<-SHELL
      #   sed -i 's/"INFO"/"DEBUG"/g' /opt/nifi/current/conf/logback.xml
      # SHELL

      # daemon-reload
      config.vm.provision "shell", inline: <<-SHELL
        systemctl daemon-reload
      SHELL

      config.vm.provision "shell", inline: <<-SHELL
        systemctl enable nifi
        systemctl start nifi
        mkdir -m 777 /tmp/in
        mkdir -m 777 /tmp/out
        echo '1,apple' > /tmp/in/apple.out
        chmod 666 /tmp/in/apple.out
      SHELL

    end
  end

end
